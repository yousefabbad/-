import streamlit as st
import json
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from decimal import Decimal, getcontext
import numpy as np
import math

# 1) دقة عالية للحسابات العشرية
getcontext().prec = 50

# 2) حاول تحميل أول 300 صفر من JSON، وإلّا استخدم أول 100 صفر مضمن
try:
    with open("zeta_zeros_300.json") as f:
        zeta_values = json.load(f)
except FileNotFoundError:
    zeta_values = [
        14.13472514173469379, 21.02203963877155499, 25.01085758014568876,
        30.42487612585951321, 32.93506158773918969, 37.58617815882567126,
        40.91871901214749519, 43.32707328091499952, 48.00515088116715973,
        49.77383247767230218, 52.97032147771446064, 56.44624769706339480,
        59.34704400260235308, 60.83177852460980984, 65.11254404808160666,
        67.07981052949417371, 69.54640171117397925, 72.06715767448190758,
        75.70469069908393317, 77.14484006887480537, 79.33737502024936792,
        82.91038085408603018, 84.73549298051705011, 87.42527461312522941,
        88.80911120763446542, 92.49189927055848430, 94.65134404051988697,
        95.87063422824530976, 98.83119421819369223, 101.31785100573139123,
        103.72553804047833942, 105.44662305232609449, 107.16861118427640752,
        111.02953554316967452, 111.87465917699263709, 114.32022091545271276,
        116.22668032085755438, 118.79078286597621732, 121.37012500242064592,
        122.94682929355258820, 124.25681855434576718, 127.51668387959649512,
        129.57870419995605099, 131.08768853093265672, 133.49773720299758645,
        134.75650975337387133, 138.11604205453344320, 139.73620895212138895,
        141.12370740402112376, 143.11184580762063274, 145.02881688439421297,
        146.29321100096453050, 147.42276534366358375, 149.73976253647427646,
        151.00060956776276485, 152.61625824916808290, 155.14594983972216797,
        156.65416092655448717, 158.34907382724918885, 160.15793437517658429,
        160.70085168366012065, 163.16895154542066614, 165.01148502072155020,
        167.42017319904481682, 169.19278527155615677, 170.72007024930789344,
        172.72616198517363420, 174.36699371173939709, 176.74477372787080778,
        178.37107679302922656, 179.67450139104701853, 181.25153654165625069,
        183.50063681283513328, 185.09844592490485136, 186.46669604668020660,
        188.18727159907932610, 189.89125791018353216, 191.59469484716114358,
        193.19542126313240166, 195.04042200919508526, 196.38576389261047233,
        198.61723975320822171, 199.71570114561944166, 201.02199704675333212,
        202.62736906946532797, 205.02121543371620291, 206.43142965510151962,
        207.81387177114638600, 209.35086751485428083, 210.54908271984647660,
        212.10470710574042084, 214.28365169206415516, 215.55345618910118837,
        217.68835650548887805, 219.27601161776762743, 221.14301902995011357,
        221.70605899793346125, 223.17471524617460525, 225.05383551605956505,
        226.20609214558193529, 227.42144440980351523, 229.33771845405345563,
        231.25097044029757212, 232.93010704689839302, 234.08372502364114658,
        236.52437836164831653, 238.28445856902077368, 239.73719399173352028
    ]

# 3) حضّر الأعداد الصحيحة والبواقي
SCALE = 10**9
zeta_ints = [int(Decimal(str(z)) * SCALE) for z in zeta_values]

# 4) إعداد Streamlit
st.set_page_config(page_title="ZetaKey Full Analyzer", layout="centered", page_icon="🔐")
st.title("🔐 ZetaKey: تحليل شامل لمفاتيح RSA")

uploaded = st.file_uploader("📎 ارفع مفتاح عام PEM", type=["pem"])
if not uploaded:
    st.info("ارفع ملف PEM للمفتاح العام للبدء في التحليل.")
    st.stop()

# 5) استخراج n و e
try:
    pub = serialization.load_pem_public_key(uploaded.read(), backend=default_backend())
    n = pub.public_numbers().n
    e = pub.public_numbers().e
except Exception as err:
    st.error(f"❌ خطأ في قراءة المفتاح: {err}")
    st.stop()

st.success("✅ تم استخراج المفتاح")
st.write(f"**Bit-length (n):** {n.bit_length()} بت")
st.write(f"**Exponent (e):** {e}")

# 6) التحليلات
# أ) بواقي نسبيّة
ratios = [(n % z) / z for z in zeta_ints]

# ب) إحصائيات
arr = np.array(ratios, dtype=np.float64)
sigma = arr.std()
relative_score = sigma / math.log2(n)

hist, _ = np.histogram(ratios, bins=20, range=(0.0,1.0))
total = hist.sum()
expected = total / 20
chi_sq = float(np.sum((hist - expected)**2 / expected))
probs = hist / total
entropy = -float(np.sum([p * math.log2(p) for p in probs if p>0]))

# 7) العرض
st.subheader("📊 إحصائيات التحليل")
st.write(f"- **σ (std):** {sigma:.4f}")
st.write(f"- **مؤشر نسبي (σ/log₂(n)):** {relative_score:.6f}")
st.write(f"- **χ² (19 dof):** {chi_sq:.2f}")
st.write(f"- **Entropy:** {entropy:.3f} / max≈{math.log2(20):.3f}")

st.subheader("📈 توزيع البواقي")
st.bar_chart(hist)

# 8) التقييم النهائي
if chi_sq > 30 or entropy < 3.5 or relative_score < 0.01:
    st.error("❌ المفتاح يحتمل أنه ضعيف التوليد")
else:
    st.success("✅ المفتاح يبدو جيد التوليد")
