import streamlit as st
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from decimal import Decimal, getcontext
import numpy as np
import math

# دقّة مرتفعة لحساب الأصفار
getcontext().prec = 50

# أول 100 صفر غير تافه لدالة زيتا (القيم موثّقة)
zeta_values = [
    14.134725141734693790, 21.022039638771554992, 25.010857580145688763,
    30.424876125859513210, 32.935061587739189690, 37.586178158825671257,
    40.918719012147495187, 43.327073280914999519, 48.005150881167159727,
    49.773832477672302181, 52.970321477714460644, 56.446247697063394804,
    59.347044002602353079, 60.831778524609809844, 65.112544048081606660,
    67.079810529494173714, 69.546401711173979252, 72.067157674481907582,
    75.704690699083933168, 77.144840068874805372, 79.337375020249367922,
    82.910380854086030183, 84.735492980517050105, 87.425274613125229406,
    88.809111207634465423, 92.491899270558484296, 94.651344040519886966,
    95.870634228245309758, 98.831194218193692234, 101.317851005731391228,
    103.725538040478339416, 105.446623052326094493, 107.168611184276407515,
    111.029535543169674525, 111.874659176992637085, 114.320220915452712765,
    116.226680320857554382, 118.790782865976217323, 121.370125002420645919,
    122.946829293552588200, 124.256818554345767184, 127.516683879596495124,
    129.578704199956050986, 131.087688530932656723, 133.497737202997586450,
    134.756509753373871331, 138.116042054533443200, 139.736208952121388950,
    141.123707404021123762, 143.111845807620632739, 145.028816884394212970,
    146.293211000964530504, 147.422765343663583754, 149.739762536474276460,
    151.000609567762764848, 152.616258249168082895, 155.145949839722167966,
    156.654160926554487173, 158.349073827249188845, 160.157934375176584289,
    160.700851683660120645, 163.168951545420666142, 165.011485020721550203,
    167.420173199044816816, 169.192785271556156768, 170.720070249307893439,
    172.726161985173634203, 174.366993711739397094, 176.744773727870807783,
    178.371076793029226563, 179.674501391047018526, 181.251536541656250694,
    183.500636812835133284, 185.098445924904851357, 186.466696046680206596,
    188.187271599079326100, 189.891257910183532160, 191.594694847161143580,
    193.195421263132401656, 195.040422009195085263, 196.385763892610472325,
    198.617239753208221709, 199.715701145619441661, 201.021997046753332121,
    202.627369069465327967, 205.021215433716202908, 206.431429655101519618,
    207.813871771146385994, 209.350867514854280830, 210.549082719846476601,
    212.104707105740420844, 214.283651692064155157, 215.553456189101188369,
    217.688356505488878045, 219.276011617767627433, 221.143019029950113569,
    221.706058997933461252, 223.174715246174605248, 225.053835516059565047,
    226.206092145581935292, 227.421444409803515229, 229.337718454053455628,
    231.250970440297572123, 232.930107046898393023, 234.083725023641146580,
    236.524378361648316528, 238.284458569020773675, 239.737193991733520280
]

# تحويل لـ Decimal ثم إلى أعداد صحيحة بمقياس كبير لضمان الدقة
SCALE = 10**9
zeta_ints = [int(Decimal(str(z)) * SCALE) for z in zeta_values]

st.set_page_config(page_title="ZetaKey χ²-Entropy", layout="centered", page_icon="🔐")
st.title("🔐 تقييم مفاتيح RSA عبر χ² و Entropy على أوّل 100 صفر من زيتا")

uploaded = st.file_uploader("📎 ارفع مفتاح عام بصيغة PEM", type=["pem"])
if uploaded:
    try:
        pub = serialization.load_pem_public_key(uploaded.read(), backend=default_backend())
        n = pub.public_numbers().n
        bits = n.bit_length()
        st.write(f"**Bit-length (n)** : {bits} بت")

        # نسب البواقي: (n mod γᵢ) / γᵢ  →  ∈ (0,1)
        ratios = [(n % z_int) / z_val for z_int, z_val in zip(zeta_ints, zeta_values)]

        # تقسيم إلى 20 فئة متساوية
        hist, _ = np.histogram(ratios, bins=20, range=(0.0, 1.0))
        total = hist.sum()
        expected = total / 20

        # χ² يدوي
        chi_sq = np.sum((hist - expected)**2 / expected)

        # Entropy
        probs = hist / total
        entropy = -np.sum([p * math.log2(p) for p in probs if p > 0])

        st.subheader("📊 إحصائيات التوزيع")
        st.write(f"**χ² (19 dof)** = {chi_sq:.2f}")
        st.write(f"**Entropy (bits)** = {entropy:.3f} / max ≈ {math.log2(20):.3f}")

        # تقييم مبسّط
        if chi_sq > 30 or entropy < 3.5:
            st.error("❌ توزيع غير متجانس – المفتاح يُحتمل أنه ذو توليد ضعيف")
        else:
            st.success("✅ توزيع قريب من العشوائي – المفتاح يبدو جيد التوليد")

    except Exception as err:
        st.error(f"❌ خطأ: {err}")
